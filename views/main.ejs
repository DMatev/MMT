<!doctype html>
<html>
<head>
	<link rel="stylesheet" type="text/css" href="/css/main.css">
	<title>LOLBuddies</title>
</head>
<body>
	<div id="container-main">
		<div id="menu">
			<p class="menu-option" id="LogOut">Log Out</p>
			<p class="menu-option" id="EditFriend">Edit Friend List</p>
			<p class="menu-option" id="JunglerTimerTool">Jungler Timer Tool</p>
			<p class="menu-option" id="History">Match History</p>
		</div>
		<div id="friends">
		</div>
		<div id="main-content"> 

			<div id="container-default">
				<h1 style="text-align: center">Welcome to LOLBuddies<h1>
			</div>

			<div id="container-junglertimertool">
				<p> Jungler Timer Tool</p>
				<audio id="audioNotification">
				 <source src="/audio/notification.mp3" type="audio/mp3">
				  Your browser does not support HTML5 audio.
				</audio>

				<div class="JunglerTimerToolElement">
					<p>Baron</p>
					<canvas width="120" height="150" id="Baron">Your browser does not support the HTML5 canvas tag.</canvas>
					<button id="btnBaron">Start/Reset</button>
				</div>
				<div class="JunglerTimerToolElement">
					<p>Drake</p>
					<canvas width="120" height="150" id="Drake">Your browser does not support the HTML5 canvas tag.</canvas>
					<button id="btnDrake">Start/Reset</button>
				</div>
				<div class="JunglerTimerToolElement">
					<p>Blue Golem</p>
					<canvas width="120" height="150" id="BlueGolem">Your browser does not support the HTML5 canvas tag.</canvas>
					<button id="btnBlueGolem">Start/Reset</button>
				</div>
				<div class="JunglerTimerToolElement">
					<p>Red Golem</p>
					<canvas width="120" height="150" id="RedGolem">Your browser does not support the HTML5 canvas tag.</canvas>
					<button id="btnRedGolem">Start/Reset</button>
				</div>

			</div>

			<div id="container-friendlist">
				<div class="container-erorr" id="errorMessage">
				</div>
				<div id="container-freinds" >
				</div>
				<div id="container-addfriend">
					<p style="font-size: 20px">Add Friend</p>
					<input type="text" placeholder="username" class="input-text" id="inputUsr" name="username"/>
					<input type="text" placeholder="LOL Summoner name" class="input-text" id="inputLOLAcc" name="lolacc"/>
					<select name="lolserver" id="inputLOLServer">
					  <option value="euw">EUW</option>
					  <option value="eune">EUNE</option>
					</select>
					<button class="input-button" id="btnAddFriend">add</button>
				</div>
			</div>

			<div id="container-matchhistory">
				<div id="wait-history">
					<div class="wait"></div>
				</div>

				<div id="container-history">
				</div>
			</div>
		</div>
	</div>
<script src="/js/lib/jquery-1.11.0.min.js"></script>
<script type="text/javascript">
	$(function() {
		var lolid =<%-JSON.stringify(lolid)%>, lolserver =<%-JSON.stringify(lolserver)%>, lolacc =<%-JSON.stringify(lolacc)%>;
		var audioNotification = $('#audioNotification')[0];
		var imgBaron = new Image();
		imgBaron.src = 'images/baron.png';
		var imgDrake = new Image();
		imgDrake.src = 'images/dragon.png';
		var imgBlueGolem = new Image();
		imgBlueGolem.src = 'images/blueGolem.png';
		var imgRedGolem = new Image();
		imgRedGolem.src = 'images/redGolem.png';
	

		var Baron = new JunglerTimerTool(420000, $('#Baron')[0], $('#Baron')[0].getContext('2d'), imgBaron);
		var Drake = new JunglerTimerTool(360000, $('#Drake')[0], $('#Drake')[0].getContext('2d'), imgDrake);
		var BlueGolem = new JunglerTimerTool(300000, $('#BlueGolem')[0], $('#BlueGolem')[0].getContext('2d'), imgBlueGolem);
		var RedGolem = new JunglerTimerTool(300000, $('#RedGolem')[0], $('#RedGolem')[0].getContext('2d'), imgRedGolem);

		var isRuningMatchHistory = false, isRuningEditFriend = false;
		function JunglerTimerTool(length, canvas, ctx, img){
			this.length = length;
			this.timeOutInterval = null;
			this.mainLoopInterval = null;
			this.timeLeft = null;
			this.img = img;
			this.canvas = canvas;
			this.ctx = ctx;
		}
		JunglerTimerTool.prototype.stop = function(){
			clearInterval(this.timeOutInterval);
			clearInterval(this.mainLoopInterval);
			this.timeLeft = 0;
			this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);
		};
		JunglerTimerTool.prototype.start = function(){
			var that = this;
			this.timeLeft = that.length;
			this.timeOutInterval = setTimeout(function(){
				audioNotification.currentTime = 0;
				audioNotification.play();
			}, that.length);
			this.animate();
		};
		JunglerTimerTool.prototype.animate = function(){
			var that = this, seconds, minutes, time;
			this.mainLoopInterval = setInterval(function(){
				that.ctx.clearRect(0,0,that.canvas.width,that.canvas.height);
				if (that.timeLeft === 0){
					that.stop();
					that.start();
				}
				that.ctx.font = "20px Georgia";
				that.ctx.fillStyle = "white";
				seconds = parseInt((that.timeLeft / 1000) % 60) ;
				minutes = parseInt((that.timeLeft / (1000*60)) % 60);
				if (minutes > 0){
					if (seconds.toString().length === 1){
						time = minutes + ':' + '0' + seconds;
					} else {
						time = minutes + ':' + seconds;
					}				
				} else {
					time = seconds;
				}				
				that.ctx.fillText(time,10,20);
				that.timeLeft -= 1000;
				//slider
				roundRect(that.ctx,0,120,15*that.length/60000,22,5,false,true);
				that.ctx.fillStyle = "blue";
				roundRect(that.ctx,0,121,(15*that.length/60000)*that.timeLeft/that.length,20,5,true,true);
				that.ctx.drawImage(that.img,10,10);
			}, 1000);
		};

		function stopJTT(){
			Baron.stop();
			Drake.stop();
			RedGolem.stop();
			BlueGolem.stop();
		}

		drawFriendList();

		function drawFriendList(){
			$('#friends').empty();
			$('<p style="font-size: 20px">Friends: </p>').appendTo('#friends');

			$.get( "/api/friends", function(friends) {
				if (friends.friendList.length === 0){
					$("<p>you have no friends</p>")
					.appendTo('#friends');
				}
				for(var i=0; i<friends.friendList.length; i++){
					$('<p>' + friends.friendList[i].lolacc +'</p>')
					.on('click', { server: friends.friendList[i].lolserver, id: friends.friendList[i].lolid, username: friends.friendList[i].lolacc }, function(event){
						matchHistory(event.data.server, event.data.id, event.data.username);
					})
					.hover(
					  function() {
					    $( this ).addClass( "hover" );
					  }, function() {
					    $( this ).removeClass( "hover" );
					  }
					)
					.appendTo('#friends');
				}
			});
		}

		function drawFriends(){
			drawFriendList();
			$('#container-freinds').empty();
			$.get( "/api/friends", function(friends) {
				if (friends.friendList.length === 0){
					$("<p>you have not added friends</p>")
					.appendTo('#container-freinds');
				}
				for(var i=0; i<friends.friendList.length; i++){
					$('<div class="container-friend">' + '<p>' + friends.friendList[i].lolacc + ' ('+ friends.friendList[i].username + ')' + '</p>'  + '</div>')
					.appendTo('#container-freinds');
					$('<button class="friend-remove">remove</button>').on('click', { user_id : friends.friendList[i]._id }, function(event){
						$.ajax({
							url: '/api/friends/delete/' + encodeURIComponent(event.data.user_id),
							type: 'POST',
							data: '',
							success: function(data){
								if(data.error){
									$('#errorMessage')[0].innerHTML = data.error;
								} else {
									$('#errorMessage')[0].innerHTML = '';
									drawFriends();
								}
							}
						});
					})
					.appendTo('#container-freinds');
				}
				isRuningMatchHistory = false;
			});
			$('#container-friendlist').show();
		}

		$( ".menu-option" ).hover(
		  function() {
		    $( this ).addClass( "hover" );
		  }, function() {
		    $( this ).removeClass( "hover" );
		  }
		);

		$('#LogOut').on('click', function(){
			window.location = '/logout';
		});

		$('#EditFriend').on('click', function(){
			if(!isRuningMatchHistory){
				isRuningMatchHistory = true;
				$('#container-default').hide();
				$('#container-junglertimertool').hide();
				$('#container-matchhistory').hide();
				$('#errorMessage')[0].innerHTML = '';
				stopJTT();
				drawFriends();
			}
		});
		$('#JunglerTimerTool').on('click', function(){
			$('#container-default').hide();
			$('#container-friendlist').hide();
			$('#container-matchhistory').hide();
			$('#container-junglertimertool').show();

			Baron.ctx.drawImage(Baron.img,10,10);
			Drake.ctx.drawImage(Drake.img,10,10);
			BlueGolem.ctx.drawImage(BlueGolem.img,10,10);
			RedGolem.ctx.drawImage(RedGolem.img,10,10);

		});
		$('#History').on('click', function(){
			stopJTT();
			matchHistory(lolserver, lolid, lolacc);
		});
		$('#btnAddFriend').on('click', function(){
			$('#container-freinds').hide();
			$('#container-addfriend').hide();
			$.ajax({
				url: '/api/friends/add',
				type: 'POST',
				data: "username="+encodeURIComponent($('#inputUsr')[0].value) +
								"&lolacc="+encodeURIComponent($('#inputLOLAcc')[0].value)+
								"&lolserver="+encodeURIComponent($('#inputLOLServer')[0].value),
				success: function(data) {
					if(data.validation){
						$('#errorMessage')[0].innerHTML = data.validation;
					} else {
						$('#errorMessage')[0].innerHTML = '';
					}
					if(data.error){
						$('#errorMessage')[0].innerHTML = data.error;
					} else {
						$('#inputUsr')[0].value = '';
						$('#inputLOLAcc')[0].value = '';

						$('#container-freinds').show();
						$('#container-addfriend').show();
						drawFriends();
					}
				}	
			});
		});

		$('#btnBaron').on('click', function(){
			Baron.stop();
			Baron.start();
		});
		$('#btnDrake').on('click', function(){
			Drake.stop();
			Drake.start();
		});
		$('#btnRedGolem').on('click', function(){
			RedGolem.stop();
			RedGolem.start();
		});
		$('#btnBlueGolem').on('click', function(){
			BlueGolem.stop();
			BlueGolem.start();
		});

		

		//MAKES ROUND RECTANGLE
		function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
	 		if (typeof stroke == "undefined" ) {
	   			stroke = true;
	  		}
	 		if (typeof radius === "undefined") {
	   			radius = 5;
	 		}

	 		var grd=ctx.createLinearGradient(x,y,x,y+height);
	 		grd.addColorStop(0,'#cedbe9'); 
	 		grd.addColorStop(0.14,'#6199c7');
	 		grd.addColorStop(0.30,'#3a84c3');
	 		grd.addColorStop(0.40,'#419ad6');
	 		grd.addColorStop(0.60,'#4bb8f0');
	 		grd.addColorStop(0.80,'#3a8bc2');
	 		grd.addColorStop(1,'#aac5de');
	 		ctx.fillStyle = grd;


	  		ctx.beginPath();
	 	 	ctx.moveTo(x + radius, y);
	  		ctx.lineTo(x + width - radius, y);
	  		ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
	  		ctx.lineTo(x + width, y + height - radius);
	  		ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
	  		ctx.lineTo(x + radius, y + height);
	  		ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
	  		ctx.lineTo(x, y + radius);
	  		ctx.quadraticCurveTo(x, y, x + radius, y);
	  		ctx.closePath();
	  		if (stroke) {
	    		ctx.stroke();
	  		}
	  		if (fill) {
	    		ctx.fill();
	  		} else {
	  			ctx.fillStyle='white';
	  			ctx.fill();
	  		}       
		}



		function matchHistory(lolserver, lolid, lolacc){
			$('#container-default').hide();
			$('#container-junglertimertool').hide();
			$('#container-friendlist').hide();
			$('#container-history').empty();
			$('#container-matchhistory').show();
			$('#wait-history').show();
			stopJTT();
			if(!isRuningMatchHistory){
				isRuningMatchHistory = true;

			$.get( "/api/history/"+ encodeURIComponent(lolserver) + '/' + encodeURIComponent(lolid), function(data) {
				$('#wait-history').hide();
				$('<p><span class="matchHistory-username">' + lolacc + '</span>`s match history</p>').appendTo('#container-history');
				for(var i=0; i<data.history.games.length; i++){
					var isWon;
					if (data.history.games[i].isWon){
						isWon = 'game-won';
					} else {
						isWon = 'game-lost';
					}
					$('<div class="' + isWon + '">' +
						'<div id="playerChampionImage'+ i +'">' + '</div>' +
						'<div class="statsDiv">' +
							'<div id="playerStats' + i +'"></div>' +
						'</div>' +
						'<div class="teamsDiv">' +
							'<div class="purple">'+
								'<p class="teams-text">Purple team: </p>' + 
								'<div id="purpleTeam' + i + '"></div>' +
							'</div>'+
							'<div class="blue">'+
								'<p class="teams-text">Blue team: </p>' +
								'<div id="blueTeam' + i + '"></div>' +
							'</div>'+
						'</div>' +
						'<div class="summonersDiv">' +
							'<p class="summoners-text">Summoners: </p>' +
							'<div id="playerSummoners' + i + 'spell1"></div>' +
							'<div id="playerSummoners' + i + 'spell2"></div>' + 
						'</div>' +
						'<div class="itemsDiv">' +
							'<p class="items-text">Items: </p>' +
							'<div id="playerItems'+ i + '"></div>' +
						'</div>' + 
					'</div>')
					.appendTo('#container-history');

					//SOME CSS FOR THE ABOVE		
					$('#playerItems' + i).css({
						'float': 'left',
						'margin-top': -50 +'px',
						'height': 48 + 'px',
						'width': 450 + 'px'
					});
					$('#playerStats' + i).css({
						'float': 'left',
						'margin-top': 50 +'px',
						'height': 48 + 'px',
						'width': 450 + 'px'
					});

					// PLAYER CHAMPION IMAGE
					$('#playerChampionImage'+i).css({
						'position': 'absolute',
						'margin-top': 50 +'px',
						'border-radius': 10 +'px',
						width: 120 + 'px',
						height: 120 + 'px',
						"background-image":  'url(' + data.history.games[i].player.champion.img.full + ')'
					}).
					on('mouseenter', {name: data.history.games[i].player.champion.name}, function(event){
						$(this).empty();
						$('<div class="info-hover"><p class="info-hover-text">' + event.data.name + '</p></div>').appendTo(this);
					})
					.on('mouseleave', {name: data.history.games[i].player.champion.name}, function(event){
						$(this).empty();
					});
					// PLAYER STATS KDA
					var kills, deaths, assists;
					if (data.history.games[i].player.KDA.kills !== undefined){
						kills = data.history.games[i].player.KDA.kills;
					} else {
						kills = 0;
					}
					if (data.history.games[i].player.KDA.deaths !== undefined){
						deaths = data.history.games[i].player.KDA.deaths;
					} else {
						deaths = 0;
					}
					if (data.history.games[i].player.KDA.assists !== undefined){
						assists = data.history.games[i].player.KDA.assists;
					} else {
						assists = 0;
					}
					$("<p class='stats-text'> kills: " + kills + " deaths: " + deaths + " assists: " + assists + "</p>")
					.appendTo('#playerStats' + i);
					// SUMMONER SPELL 1
					$('#playerSummoners'+i+'spell1').css({
						position: 'relative',
					 	float: 'left',
						width: data.history.games[i].player.summoners.spell1.img.sprite.width,
						height: data.history.games[i].player.summoners.spell1.img.sprite.height,
						background: data.history.games[i].player.summoners.spell1.img.sprite.background
					})
					.on('mouseenter', {name: data.history.games[i].player.summoners.spell1.name}, function(event){
						$(this).empty();
						$('<div class="info-hover"><p class="info-hover-text">' + event.data.name + '</p></div>').appendTo(this);
					})
					.on('mouseleave', {name: data.history.games[i].player.summoners.spell1.name}, function(event){
						$(this).empty();
					});
					// SUMMONER SPELL 2
					$('#playerSummoners'+i+'spell2').css({
						'position': 'relative',
					 	'float': 'left',
						width: data.history.games[i].player.summoners.spell2.img.sprite.width,
						height: data.history.games[i].player.summoners.spell2.img.sprite.height,
						background: data.history.games[i].player.summoners.spell2.img.sprite.background
					})
					.on('mouseenter', {name: data.history.games[i].player.summoners.spell2.name}, function(event){
						$(this).empty();
						$('<div class="info-hover"><p class="info-hover-text">' + event.data.name + '</p></div>').appendTo(this);
					})
					.on('mouseleave', {name: data.history.games[i].player.summoners.spell2.name}, function(event){
						$(this).empty();
					});
					// ITEMS
					for(var j=0; j<data.history.games[i].player.items.length; j++){
						$('<div class="items" id="game' + i + 'item' + j + '"></div>')
						.css({
							width: data.history.games[i].player.items[j].img.sprite.width,
							height: data.history.games[i].player.items[j].img.sprite.height,
							background: data.history.games[i].player.items[j].img.sprite.background
						})
						.on('mouseenter', {name: data.history.games[i].player.items[j].name}, function(event){
							$(this).empty();
							$('<div class="info-hover"><p class="info-hover-text">' + event.data.name + '</p></div>').appendTo(this);
						})
						.on('mouseleave', {name: data.history.games[i].player.items[j].name}, function(event){
							$(this).empty();
						})
						.appendTo('#playerItems' + i);
					}
					// TEAMS
					for(var k=0; k<data.history.games[i].teams.length; k++){
						var player = $('<div class="teams" id="game' + i + 'player' + k + '"></div>')
						.css({
							width: data.history.games[i].teams[k].player.champion.img.sprite.width,
							height: data.history.games[i].teams[k].player.champion.img.sprite.height,
							background: data.history.games[i].teams[k].player.champion.img.sprite.background
						})
						.on('mouseenter', {name: data.history.games[i].teams[k].player.champion.name}, function(event){
							$(this).empty();
							$('<div class="info-hover"><p class="info-hover-text">' + event.data.name + '</p></div>').appendTo(this);
						})
						.on('mouseleave', {name: data.history.games[i].teams[k].player.champion.name}, function(event){
							$(this).empty();
						});
						if (data.history.games[i].teams[k].player.teamId === 200){
							player.appendTo('#blueTeam' + i);
						} else {
							player.appendTo('#purpleTeam' + i);
						}
					}
					isRuningMatchHistory = false;
				}
			});
			}
		}
	});
</script>
</body>
</html>